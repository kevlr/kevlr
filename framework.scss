$media-queries: null;
$first-layout: null;
$layouts-name: null;

// Grid System
$mobile-first: false; // true or false
$wrapper-max-width: 960px;
$wrapper-align: center; // center, left or right
$columns-number: 12;

$layouts-names: 'tablet', 'mobile'; // ascending if mobile first or descending if not mobile-first / null if not responsive
$layouts-breakpoints: 780px, 480px;
$min-and-max-width: true, false;
$layout-wrapper-width: null, 320px; // null if fluid
$layout-columns-number: 8, 4;

// Column style

$padding: 20px, 20px;
$margin: 20px, 20px, 20px, 20px;
$border-width: 1px;
$border-style: solid;
$border-color: #000;

@if lenght($padding) == 1 {
  $padding: nth($padding, 1), nth($padding, 1), nth($padding, 1), nth($padding, 1);
} @else if lenght($padding) == 2 {
  $padding: nth($padding, 1), nth($padding, 2), nth($padding, 1), nth($padding, 2);
} @else if lenght($padding) == 3 {
  $padding: nth($padding, 1), nth($padding, 2), nth($padding, 3), nth($padding, 2);
} @else if lenght($padding) == 4 {
  $padding: nth($padding, 1), nth($padding, 2), nth($padding, 3), nth($padding, 4);
}

html {
  font-size: 62.5%;
  font-family: sans-serif;
}

.wrapper {
  @if $layouts-names {
  max-width: $wrapper-max-width;
  } @else {
  width: $wrapper-max-width;
  }
  @if $wrapper-align == center {
  margin: 0 auto;
  } @else if $wrapper-align == right {
  margin: 0 0 0 auto;
  }
}

.column {
  float: left;
}

.column-content {
  
}

@if $mobile-first == false {
  $first-layout: 'wide';
} @else {
  $first-layout: 'mobile';
}

.left {
  float: left;
}

.right {
  float: right;
}

@for $i from 1 through $columns-number {
  .#{$first-layout + '-' + $i} {
    width: 100% / $columns-number * $i;
  }
}
@if $layouts-names {
  @for $i from 1 through length($layouts-names) {
    @if ($mobile-first == false and nth($min-and-max-width, $i) == false) or $i == length($layouts-names) {
      $media-queries: '(max-width:' + nth($layouts-breakpoints, $i)  + ')';
    } @else if $mobile-first == false and nth($min-and-max-width, $i) == true {
      $media-queries: '(min-width:' + (nth($layouts-breakpoints, $i + 1) + 1) + ') and (max-width:' + nth($layouts-breakpoints, $i) + ')';
    } @else if ($mobile-first == true and nth($min-and-max-width, $i) == false) or $i == length($layouts-names) {
      $media-queries: '(min-width:' + nth($layouts-breakpoints, $i) + ')';
    } @else if $mobile-first == true and nth($min-and-max-width, $i) == true {
      $media-queries: '(min-width:' + (nth($layouts-breakpoints, $i)) + ') and (max-width:' + (nth($layouts-breakpoints, $i + 1) - 1) + ')';
    }
    @media only screen and #{$media-queries} {
      @if nth($layout-wrapper-width, $i) {
        .wrapper {
          width: nth($layout-wrapper-width, $i);
        }
      }
      @for $j from 1 through nth($layout-columns-number, $i) {
        .#{nth($layouts-names, $i) + '-' + $j} {
          width: 100% / nth($layout-columns-number, $i) * $j;
        }
      }
    }
  }
}

// Typography

@mixin rem($propr, $px) {
  #{$propr}: $px;
  #{$propr}: $px / 10px * 1rem;
}

$body-copy-size: 18px, null, 16px; // Transformed in rem with px fallback
$h1-size: 60px, null, 44px;
$h2-size: 51px, null, 38px;
$h3-size: 42px, null, 32px;
$h4-size: 36px, null, 28px;
$h5-size: 30px, null, 24px;
$h6-size: 24px, null, 20px;

// 'auto' test

@mixin heading($h-number, $h-size, $i) {
  @if $h-size == auto and $i == 0 {
    h#{$h-number} {
      @include rem(font-size, (nth($body-copy-size, 1) / 3 * (10 - $h-number)))
    }
  } @else if $h-size == auto and ($i + 1) == (length($layouts-names)) {
    h#{$h-number} {
      @include rem(font-size, (nth($body-copy-size, ($i + 1)) / 4 * (10 - $h-number)))
    }
  } @else if $h-size == auto {
    h#{$h-number} {
      
    }
  } @else if $h-size {
    h#{$h-number} {
      @include rem(font-size, $h-size)
    }
  }
}

// end 'auto' test

@mixin typo($i) {
  @if nth($body-copy-size, ($i + 1)) {
    p {
      @include rem(font-size, nth($body-copy-size, ($i + 1)));
    }
  }
  @if nth($h1-size, ($i + 1)) {
    h1 {
      @include rem(font-size, nth($h1-size, ($i + 1)))
    }
  }
  @if nth($h2-size, ($i + 1)) {
    h2 {
      @include rem(font-size, nth($h2-size, ($i + 1)))
    }
  }
  @if nth($h3-size, ($i + 1)) {
    h3 {
      @include rem(font-size, nth($h3-size, ($i + 1)))
    }
  }
  @if nth($h4-size, ($i + 1)) {
    h4 {
      @include rem(font-size, nth($h4-size, ($i + 1)))
    }
  }
  @if nth($h5-size, ($i + 1)) {
    h5 {
      @include rem(font-size, nth($h5-size, ($i + 1)))
    }
  }
  @if nth($h6-size, ($i + 1)) {
    h6 {
      @include rem(font-size, nth($h6-size, ($i + 1)))
    }
  }
}

@for $i from 0 through length($layouts-names) {
  @if $i == 0 {
    @include typo($i);
  } @else {
    @if if $mobile-first == false {
      $media-queries: '(max-width:' + nth($layouts-breakpoints, $i)  + ')';
    } @else if $mobile-first == true {
      $media-queries: '(min-width:' + nth($layouts-breakpoints, $i) + ')';
    }
    @media only screen and #{$media-queries} {
      @include typo($i);
    }
  }
}

$secondary-bg-color: #000;
$secondary-color: #fff;

// Button
$button-height: 40px;
$button-line-height: 1.2;
$button-font-size: nth($body-copy-size, 1);
@mixin button-style {
  background: $secondary-bg-color;
  color: $secondary-color;
  text-align: center;
}


.button {
  display: block;
  line-height: $button-line-height;
  @include rem(font-size, $button-font-size);
  @include button-style;
  padding: (($button-height - (nth($body-copy-size, 1) * $button-line-height)) / 2);
  text-decoration: none;
}