{"version":3,"sources":["svg4everybody.js","init.svg4everybody.js"],"names":["root","factory","define","amd","svg4everybody","exports","module","this","embed","svg","target","fragment","document","createDocumentFragment","viewBox","getAttribute","setAttribute","clone","cloneNode","childNodes","length","appendChild","firstChild","loadreadystatechange","xhr","onreadystatechange","readyState","cachedDocument","_cachedDocument","implementation","createHTMLDocument","body","innerHTML","responseText","_cachedTarget","_embeds","splice","map","item","id","getElementById","rawopts","oninterval","index","uses","use","parentNode","test","nodeName","src","polyfill","opts","validate","removeChild","srcSplit","split","url","shift","join","requests","XMLHttpRequest","open","send","push","requestAnimationFrame","Object","newerIEUA","webkitUA","olderEdgeUA","navigator","userAgent","match","window","setTimeout","getElementsByTagName"],"mappings":"CAAA,SAAAA,EAAAC,GACA,kBAAAC,SAAAA,OAAAC,IACAD,UAAA,WACA,MAAAF,GAAAI,cAAAH,MACA,gBAAAI,SAAAC,OAAAD,QAAAJ,IAAAD,EAAAI,cAAAH,KACAM,KAAA,WAEA,QAAAC,GAAAC,EAAAC,GAEA,GAAAA,EAAA,CAEA,GAAAC,GAAAC,SAAAC,yBAAAC,GAAAL,EAAAM,aAAA,YAAAL,EAAAK,aAAA,UAEAD,IAAAL,EAAAO,aAAA,UAAAF,EAEA,KACA,GAAAG,GAAAP,EAAAQ,WAAA,GAAAD,EAAAE,WAAAC,QACAT,EAAAU,YAAAJ,EAAAK,WAGAb,GAAAY,YAAAV,IAGA,QAAAY,GAAAC,GAEAA,EAAAC,mBAAA,WAEA,GAAA,IAAAD,EAAAE,WAAA,CAEA,GAAAC,GAAAH,EAAAI,eAEAD,KAAAA,EAAAH,EAAAI,gBAAAhB,SAAAiB,eAAAC,mBAAA,IACAH,EAAAI,KAAAC,UAAAR,EAAAS,aAAAT,EAAAU,kBACAV,EAAAW,QAAAC,OAAA,GAAAC,IAAA,SAAAC,GAEA,GAAA5B,GAAAc,EAAAU,cAAAI,EAAAC,GAEA7B,KAAAA,EAAAc,EAAAU,cAAAI,EAAAC,IAAAZ,EAAAa,eAAAF,EAAAC,KAEA/B,EAAA8B,EAAA7B,IAAAC,OAIAc,EAAAC,qBAEA,QAAArB,GAAAqC,GACA,QAAAC,KAEA,IACA,GAAAC,GAAA,EAAAA,EAAAC,EAAAxB,QAAA,CAEA,GAAAyB,GAAAD,EAAAD,GAAAlC,EAAAoC,EAAAC,UACA,IAAArC,GAAA,OAAAsC,KAAAtC,EAAAuC,UAAA,CACA,GAAAC,GAAAJ,EAAA9B,aAAA,aACA,IAAAmC,KAAAC,EAAAC,UAAAD,EAAAC,SAAAH,EAAAxC,EAAAoC,IAAA,CAEApC,EAAA4C,YAAAR,EAEA,IAAAS,GAAAL,EAAAM,MAAA,KAAAC,EAAAF,EAAAG,QAAAlB,EAAAe,EAAAI,KAAA,IAEA,IAAAF,EAAApC,OAAA,CAEA,GAAAI,GAAAmC,EAAAH,EAEAhC,KAAAA,EAAAmC,EAAAH,GAAA,GAAAI,gBAAApC,EAAAqC,KAAA,MAAAL,GAAAhC,EAAAsC,OACAtC,EAAAW,YACAX,EAAAW,QAAA4B,MACAtD,IAAAA,EACA8B,GAAAA,IAEAhB,EAAAC,OAGAhB,GAAAC,EAAAG,SAAA4B,eAAAD,WAKAI,EAIAqB,EAAAtB,EAAA,IAEA,GAAAQ,GAAAC,EAAAc,OAAAxB,GAAAyB,EAAA,0CAAAC,EAAA,yBAAAC,EAAA,qBACAlB,GAAA,YAAAC,GAAAA,EAAAD,SAAAgB,EAAAnB,KAAAsB,UAAAC,aAAAD,UAAAC,UAAAC,MAAAH,QAAA,GAAA,QAAAC,UAAAC,UAAAC,MAAAJ,QAAA,GAAA,GAEA,IAAAR,MAAAK,EAAAQ,OAAAR,uBAAAS,WAAA7B,EAAAhC,SAAA8D,qBAAA,MAEAxB,IAAAR,IAEA,MAAAtC,KC3FA,WACAA","file":"main.min.js","sourcesContent":["!function(root, factory) {\n    \"function\" == typeof define && define.amd ? // AMD. Register as an anonymous module unless amdModuleId is set\n    define([], function() {\n        return root.svg4everybody = factory();\n    }) : \"object\" == typeof exports ? module.exports = factory() : root.svg4everybody = factory();\n}(this, function() {\n    /*! svg4everybody v2.1.0 | github.com/jonathantneal/svg4everybody */\n    function embed(svg, target) {\n        // if the target exists\n        if (target) {\n            // create a document fragment to hold the contents of the target\n            var fragment = document.createDocumentFragment(), viewBox = !svg.getAttribute(\"viewBox\") && target.getAttribute(\"viewBox\");\n            // conditionally set the viewBox on the svg\n            viewBox && svg.setAttribute(\"viewBox\", viewBox);\n            // copy the contents of the clone into the fragment\n            for (// clone the target\n            var clone = target.cloneNode(!0); clone.childNodes.length; ) {\n                fragment.appendChild(clone.firstChild);\n            }\n            // append the fragment into the svg\n            svg.appendChild(fragment);\n        }\n    }\n    function loadreadystatechange(xhr) {\n        // listen to changes in the request\n        xhr.onreadystatechange = function() {\n            // if the request is ready\n            if (4 === xhr.readyState) {\n                // get the cached html document\n                var cachedDocument = xhr._cachedDocument;\n                // ensure the cached html document based on the xhr response\n                cachedDocument || (cachedDocument = xhr._cachedDocument = document.implementation.createHTMLDocument(\"\"),\n                cachedDocument.body.innerHTML = xhr.responseText, xhr._cachedTarget = {}), // clear the xhr embeds list and embed each item\n                xhr._embeds.splice(0).map(function(item) {\n                    // get the cached target\n                    var target = xhr._cachedTarget[item.id];\n                    // ensure the cached target\n                    target || (target = xhr._cachedTarget[item.id] = cachedDocument.getElementById(item.id)),\n                    // embed the target into the svg\n                    embed(item.svg, target);\n                });\n            }\n        }, // test the ready state change immediately\n        xhr.onreadystatechange();\n    }\n    function svg4everybody(rawopts) {\n        function oninterval() {\n            // while the index exists in the live <use> collection\n            for (// get the cached <use> index\n            var index = 0; index < uses.length; ) {\n                // get the current <use>\n                var use = uses[index], svg = use.parentNode;\n                if (svg && /svg/i.test(svg.nodeName)) {\n                    var src = use.getAttribute(\"xlink:href\");\n                    if (polyfill && (!opts.validate || opts.validate(src, svg, use))) {\n                        // remove the <use> element\n                        svg.removeChild(use);\n                        // parse the src and get the url and id\n                        var srcSplit = src.split(\"#\"), url = srcSplit.shift(), id = srcSplit.join(\"#\");\n                        // if the link is external\n                        if (url.length) {\n                            // get the cached xhr request\n                            var xhr = requests[url];\n                            // ensure the xhr request exists\n                            xhr || (xhr = requests[url] = new XMLHttpRequest(), xhr.open(\"GET\", url), xhr.send(),\n                            xhr._embeds = []), // add the svg and id as an item to the xhr embeds list\n                            xhr._embeds.push({\n                                svg: svg,\n                                id: id\n                            }), // prepare the xhr ready state change event\n                            loadreadystatechange(xhr);\n                        } else {\n                            // embed the local id into the svg\n                            embed(svg, document.getElementById(id));\n                        }\n                    }\n                } else {\n                    // increase the index when the previous value was not \"valid\"\n                    ++index;\n                }\n            }\n            // continue the interval\n            requestAnimationFrame(oninterval, 67);\n        }\n        var polyfill, opts = Object(rawopts), newerIEUA = /\\bTrident\\/[567]\\b|\\bMSIE (?:9|10)\\.0\\b/, webkitUA = /\\bAppleWebKit\\/(\\d+)\\b/, olderEdgeUA = /\\bEdge\\/12\\.(\\d+)\\b/;\n        polyfill = \"polyfill\" in opts ? opts.polyfill : newerIEUA.test(navigator.userAgent) || (navigator.userAgent.match(olderEdgeUA) || [])[1] < 10547 || (navigator.userAgent.match(webkitUA) || [])[1] < 537;\n        // create xhr requests object\n        var requests = {}, requestAnimationFrame = window.requestAnimationFrame || setTimeout, uses = document.getElementsByTagName(\"use\");\n        // conditionally start the interval if the polyfill is active\n        polyfill && oninterval();\n    }\n    return svg4everybody;\n});\n","(function(){\n  svg4everybody();\n})();\n"],"sourceRoot":"/source/"}