// Typography

@mixin rem($propr, $px) {
	#{$propr}: $px;
	#{$propr}: $px / 10px * 1rem;
}

$body-copy-size: 18px, null, 16px; // Transformed in rem with px fallback
$h1-size: 60px, null, 44px;
$h2-size: 51px, null, 38px;
$h3-size: 42px, null, 32px;
$h4-size: 36px, null, 28px;
$h5-size: 30px, null, 24px;
$h6-size: 24px, null, 20px;

// 'auto' test

@mixin heading($h-number, $h-size, $i) {
	@if $h-size == auto and $i == 0 {
		h#{$h-number} {
			@include rem(font-size, (nth($body-copy-size, 1) / 3 * (10 - $h-number)))
		}
	} @else if $h-size == auto and ($i + 1) == (length($layouts-names)) {
		h#{$h-number} {
			@include rem(font-size, (nth($body-copy-size, ($i + 1)) / 4 * (10 - $h-number)))
		}
	} @else if $h-size == auto {
		h#{$h-number} {
			
		}
	} @else if $h-size {
		h#{$h-number} {
			@include rem(font-size, $h-size)
		}
	}
}

// end 'auto' test

@mixin typo($i) {
	@if nth($body-copy-size, ($i + 1)) {
		p {
			@include rem(font-size, nth($body-copy-size, ($i + 1)));
		}
	}
	@if nth($h1-size, ($i + 1)) {
		h1 {
			@include rem(font-size, nth($h1-size, ($i + 1)))
		}
	}
	@if nth($h2-size, ($i + 1)) {
		h2 {
			@include rem(font-size, nth($h2-size, ($i + 1)))
		}
	}
	@if nth($h3-size, ($i + 1)) {
		h3 {
			@include rem(font-size, nth($h3-size, ($i + 1)))
		}
	}
	@if nth($h4-size, ($i + 1)) {
		h4 {
			@include rem(font-size, nth($h4-size, ($i + 1)))
		}
	}
	@if nth($h5-size, ($i + 1)) {
		h5 {
			@include rem(font-size, nth($h5-size, ($i + 1)))
		}
	}
	@if nth($h6-size, ($i + 1)) {
		h6 {
			@include rem(font-size, nth($h6-size, ($i + 1)))
		}
	}
}

@for $i from 0 through length($layouts-names) {
	@if $i == 0 {
		@include typo($i);
	} @else {
		@if if $mobile-first == false {
			$media-queries: '(max-width:' + nth($layouts-breakpoints, $i)	+ ')';
		} @else if $mobile-first == true {
			$media-queries: '(min-width:' + nth($layouts-breakpoints, $i) + ')';
		}
		@media only screen and #{$media-queries} {
			@include typo($i);
		}
	}
}
